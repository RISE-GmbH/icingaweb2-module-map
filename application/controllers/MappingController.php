<?php
/* Originally from Icinga Web 2 Elasticsearch Module (c) 2017 Icinga Development Team | GPLv2+ */

/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Map\Controllers;

use Icinga\Data\Filter\FilterMatch;
use Icinga\Exception\Http\HttpMethodNotAllowedException;
use Icinga\Web\Controller;

use Icinga\Module\Map\Forms\MappingForm;
use Icinga\Module\Map\MappingIniRepository;

class MappingController extends Controller
{
    /**
     * Set the title tab
     *
     * @param string $label
     */
    public function setTitle($label)
    {
        $this->getTabs()->add(uniqid(), [
            'active' => true,
            'label' => $label,
            'url' => $this->getRequest()->getUrl()
        ]);
    }


    public function indexAction()
    {
        $this->setTitle($this->translate('Custom Maps'));
        if ($this->hasPermission('map/mapping')) {
            $this->view->configs = (new MappingIniRepository())->select();
        } else {
            $this->view->configs = (new MappingIniRepository())->select()
                ->addFilter(new FilterMatch('author', '=', $this->Auth()->getUser()->getUsername()));
        }
        $this->_helper->viewRenderer->setRender('mapping/table', null, true);
    }

    public function newAction()
    {
        $form = new MappingForm([
            'mode' => MappingForm::MODE_INSERT
        ]);

        $form->handleRequest();

        $this->setTitle($this->translate('New Custom Map'));

        $this->view->form = $form;

        $this->_helper->viewRenderer->setRender('form', null, true);
    }

    public function updateAction()
    {
        $id = $this->params->getRequired('id');
        $isAuthor = (new MappingIniRepository())->select()
            ->addFilter(new FilterMatch('author', '=', $this->Auth()->getUser()->getUsername()))
            ->addFilter(new FilterMatch('name', '=', $id));
        if (!($isAuthor || $this->hasPermission("map/mapping"))) {
            throw new HttpMethodNotAllowedException(t("You are not allowed to edit this entry!"));
        }
        $form = new MappingForm([
            'mode' => MappingForm::MODE_UPDATE,
            'identifier' => $id
        ]);

        $form->handleRequest();


        $this->setTitle($this->translate('Update Custom Map'));

        $this->view->form = $form;

        $this->_helper->viewRenderer->setRender('form', null, true);
    }

    public function deleteAction()
    {
        $id = $this->params->getRequired('id');
        $isAuthor = (new MappingIniRepository())->select()
            ->addFilter(new FilterMatch('author', '=', $this->Auth()->getUser()->getUsername()))
            ->addFilter(new FilterMatch('name', '=', $id));
        if (!($isAuthor || $this->hasPermission("map/mapping"))) {
            throw new HttpMethodNotAllowedException(t("You are not allowed to edit this entry!"));
        }
        $form = new MappingForm([
            'mode' => MappingForm::MODE_DELETE,
            'identifier' => $id
        ]);

        $form->handleRequest();

        $this->setTitle($this->translate('Remove Custom Map'));

        $this->view->form = $form;

        $this->_helper->viewRenderer->setRender('form', null, true);
    }


}
